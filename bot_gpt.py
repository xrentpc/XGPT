import os
import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import AsyncOpenAI
from aiolimiter import AsyncLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")  # üîÑ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

if not TELEGRAM_TOKEN or not TOGETHER_API_KEY:
    logger.error("TELEGRAM_TOKEN –∏–ª–∏ TOGETHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
    raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ TOGETHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")

# ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Together.ai
client = AsyncOpenAI(
    api_key=TOGETHER_API_KEY,
    base_url="https://api.together.xyz/v1"  # üîÑ –≤–∞–∂–Ω–æ: URL Together.ai
)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –≤ –º–∏–Ω—É—Ç—É
limiter = AsyncLimiter(10, 60)

# –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤
response_cache = {}

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç —á–µ—Ä–µ–∑ Together.ai ü§ñ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    if user_message in response_cache:
        await update.message.reply_text(response_cache[user_message])
        return
    async with limiter:
        try:
            response = await client.chat.completions.create(
                model="mistralai/Mixtral-8x7B-Instruct-v0.1",  # üîÑ –º–æ–¥–µ–ª—å –æ—Ç Together
                messages=[{"role": "user", "content": user_message}]
            )
            reply = response.choices[0].message.content.strip()
            response_cache[user_message] = reply
            await update.message.reply_text(reply)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Together.ai: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Together.ai.")

async def main():
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        await app.initialize()
        await app.start()
        await app.updater.start_polling(
            poll_interval=0.0,
            timeout=10,
            drop_pending_updates=True
        )

        while True:
            await asyncio.sleep(3600)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        try:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
